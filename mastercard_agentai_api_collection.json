{
  "openapi": "3.1.0",
  "info": {
    "title": "TechStack AI Server",
    "description": "\n/api/v1 helps you do awesome stuff. ðŸš€\n",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.1.0"
  },
  "paths": {
    "/": {
      "get": {
        "summary": "Serve Ui",
        "operationId": "serve_ui__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1": {
      "get": {
        "summary": "Apihome",
        "operationId": "APIHome_api_v1_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/view-logs/{log_type}/": {
      "get": {
        "summary": "View Logs",
        "operationId": "view_logs_view_logs__log_type___get",
        "parameters": [
          {
            "name": "log_type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Log Type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/admin/login": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Admin Login",
        "description": "Authenticate the admin and generate an access token.\n\n### Request Body:\n- `form_data` (Login): The login credentials (email and password).\n\n### Response:\n- A JWT access token for the authenticated admin.\n\n### Raises:\n- `401 Unauthorized`: If the credentials are incorrect.",
        "operationId": "admin_login_admin_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        }
      }
    },
    "/admin/update-credentials": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "Update Admin Credentials",
        "description": "Update the admin credentials (email or password).\n\n### Request Body:\n- `credentials` (UpdateAdminCredentials): The new email or password.\n\n### Response:\n- A success message indicating the credentials have been updated.\n\n### Raises:\n- `400 Bad Request`: If the email is already taken by another user.",
        "operationId": "update_admin_credentials_admin_update_credentials_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAdminCredentials"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/admin/suspend-user/{user_id}": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "Suspend a user account",
        "operationId": "suspend_user_account_admin_suspend_user__user_id__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        }
      }
    },
    "/admin/reactivate-user/{user_id}": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "Reactivate User Account",
        "description": "Reactivate a suspended user's account by setting `is_active` to True.\n\n### Path Parameters:\n- `user_id` (int): The ID of the user to reactivate.\n\n### Response:\n- A message confirming the user's account has been reactivated.\n\n### Raises:\n- `404 Not Found`: If the user is not found.",
        "operationId": "reactivate_user_account_admin_reactivate_user__user_id__put",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        }
      }
    },
    "/auth/health": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Health Check",
        "description": "## Health Check Endpoint\nThis route is used to verify that the service is running and healthy.\n\n### Response:\n- Returns a JSON response indicating the service status.",
        "operationId": "health_check_auth_health_get",
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        }
      }
    },
    "/auth/token": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login and Obtain Access & Refresh Tokens",
        "operationId": "login_for_access_token_auth_token_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_login_for_access_token_auth_token_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        }
      }
    },
    "/auth/auth/refresh-token": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh Access Token",
        "description": "Refresh the access token using the refresh token stored in HTTP-only cookies.",
        "operationId": "refresh_access_token_auth_auth_refresh_token_post",
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        }
      }
    },
    "/auth/admin/status": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Check Admin Status",
        "description": "Check Admin Status endpoint for admins and super-admins.\n\nReturns:\n    dict: Confirmation message for admin access.",
        "operationId": "check_admin_status_auth_admin_status_get",
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/auth/admin-protected": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Admin Protected Route",
        "description": "Admin-only protected route, accessible by admins and super-admins.\n\nReturns:\n    dict: Welcome message for the admin-protected route.",
        "operationId": "admin_protected_route_auth_admin_protected_get",
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/auth/super-admin/status": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Check Super Admin Status",
        "description": "Check Super Admin Status endpoint for super-admins.\n\nReturns:\n    dict: Confirmation message for super-admin access.",
        "operationId": "check_super_admin_status_auth_super_admin_status_get",
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/auth/super-admin-protected": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Super Admin Protected Route",
        "description": "Super Admin-only protected route.\n\nReturns:\n    dict: Welcome message for the super-admin-protected route.",
        "operationId": "super_admin_protected_route_auth_super_admin_protected_get",
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/auth/request-account-deletion": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Request Account Deletion",
        "description": "## Request Account Deletion\nAllows a logged-in user to request deletion of their account. An OTP is sent to the user's email for confirmation.\n\n### Response:\n- A message confirming that an OTP has been sent to the user's email.",
        "operationId": "request_account_deletion_auth_request_account_deletion_post",
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/auth/confirm-account-deletion": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Confirm Account Deletion",
        "operationId": "confirm_account_deletion_auth_confirm_account_deletion_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfirmAccountDeletion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        }
      }
    },
    "/auth/recover-account": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Recover Account",
        "operationId": "recover_account_auth_recover_account_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecoverAccountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        }
      }
    },
    "/logs/chat": {
      "get": {
        "tags": [
          "Chat Logs"
        ],
        "summary": "Get recent chat logs",
        "operationId": "get_chat_logs_logs_chat_get",
        "parameters": [
          {
            "name": "room_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Room Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "description": "Max number of logs to return (max 100)",
              "default": 50,
              "title": "Limit"
            },
            "description": "Max number of logs to return (max 100)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "title": "Response Get Chat Logs Logs Chat Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/logs/history": {
      "get": {
        "tags": [
          "Chat Logs"
        ],
        "summary": "Get past conversation history",
        "operationId": "get_conversation_history_logs_logs_history_get",
        "parameters": [
          {
            "name": "room_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Room Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "title": "Response Get Conversation History Logs Logs History Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/chat-ai": {
      "post": {
        "summary": "Chat",
        "description": "Handle chat requests. Only accessible to logged-in users.",
        "operationId": "chat_chat_ai_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Chat_Message"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AIMessageResponseModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/chat-history": {
      "get": {
        "summary": "Get Chat History",
        "description": "Retrieve chat history for a specific room associated with the current user.\nOnly accessible to logged-in users.",
        "operationId": "get_chat_history_chat_history_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "room_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Room Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/super-admin/login": {
      "post": {
        "tags": [
          "Super Admin"
        ],
        "summary": "Super Admin Login",
        "description": "Super Admin Login with email and password.\n\n### Request:\n- `username` (str): Super Admin email.\n- `password` (str): Super Admin password.\n\n### Response:\n- Access token if the login is successful.\n\n### Raises:\n- `401 Unauthorized`: If the credentials are incorrect.",
        "operationId": "super_admin_login_super_admin_login_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_super_admin_login_super_admin_login_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        }
      }
    },
    "/super-admin/assign-admin/{username}": {
      "post": {
        "tags": [
          "Super Admin"
        ],
        "summary": "Assign Admin Access to a User",
        "description": "Assign admin access to a user by their username.\n\n### Path Parameters:\n- `username` (str): The username of the user to promote to admin.\n\n### Response:\n- A JSON object containing details about the user after admin access is granted.\n\n### Raises:\n- `403 Forbidden`: If the current user is not a super-admin.\n- `404 Not Found`: If the user is not found.\n- `400 Bad Request`: If the user is already an admin.",
        "operationId": "assign_admin_access_super_admin_assign_admin__username__post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Username"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        }
      }
    },
    "/super-admin/revoke-admin/{username}": {
      "post": {
        "tags": [
          "Super Admin"
        ],
        "summary": "Revoke Admin Access from a User",
        "description": "Revoke admin access from a user by their username.\n\n### Path Parameters:\n- `username` (str): The username of the user to revoke admin access from.\n\n### Response:\n- A message confirming admin access has been revoked.\n\n### Raises:\n- `404 Not Found`: If the user is not found.\n- `400 Bad Request`: If the user is not an admin.",
        "operationId": "revoke_admin_access_super_admin_revoke_admin__username__post",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Username"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        }
      }
    },
    "/super-admin/list-admins": {
      "get": {
        "tags": [
          "Super Admin"
        ],
        "summary": "List All Admins",
        "description": "List all users with admin access.\n\n### Response:\n- A paginated list of users who have admin access.\n\n### Raises:\n- None",
        "operationId": "list_admins_super_admin_list_admins_get",
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse_UserProfileResponse_"
                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/register": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "User Registration with JWT",
        "description": "Handles user registration by creating entries in both the `users` and `user_profiles` tables.\n\nArgs:\n    user_data (UserCreate): The user registration data.\n    db (Session): The database session.\n\nReturns:\n    TokenResponse: The JWT access token for the registered user.",
        "operationId": "user_registration_users_register_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created - Resource was successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "200": {
            "description": "Success - Request was successful."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        }
      }
    },
    "/users/verify": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Verify User Email with OTP via Link",
        "description": "Verifies a user's email using the link sent to their email with the OTP.\n\n### Response:\n- A success message confirming user verification.\n- A message notifying if the user is already verified.\n\n### Raises:\n- `404 Not Found`: If the user is not found.\n- `400 Bad Request`: If the OTP is invalid or expired.",
        "operationId": "user_verification_via_link_users_verify_get",
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response User Verification Via Link Users Verify Get"
                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        }
      }
    },
    "/users/resend-verification-email": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Resends the verification email to ease account verification at the user's convenience",
        "description": "Resends the verification email to the user's email address.\n\n### Parameters:\n- `email` (str): The email address of the user requesting a new verification email.\n\n### Response:\n- A success message confirming the resend of the verification email.\n- A message notifying if the user is already verified.\n\n### Raises:\n- `404 Not Found`: If no user is found with the provided email.\n- `400 Bad Request`: If the user is already verified.\n- `429 Too Many Requests`: If the user attempts to resend emails too frequently.",
        "operationId": "resend_verification_email_users_resend_verification_email_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_resend_verification_email_users_resend_verification_email_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Resend Verification Email Users Resend Verification Email Post"
                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Login via Username or Email",
        "description": "Allows users to log in using either their email or username.\n\nArgs:\n    user_identifier (str): The email or username of the user.\n    password (str): The user's password.\n    db (Session): The database session.\n\nReturns:\n    JSONResponse: Access token, refresh token, and user details.",
        "operationId": "user_login_users_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_user_login_users_login_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        }
      }
    },
    "/users/forgot-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Request Password Reset",
        "description": "Allows a user to request a password reset by generating a reset link and sending it to their email.\n\n- **Stores OTP in an HTTP-only cookie** to prevent abuse.\n- **Prevents multiple resets within a cooldown period**.\n- **Ensures OTP expires after 24 hours**.\n\n### Request:\n- `email` (str): The user's email address.\n\n### Response:\n- A message confirming that a password reset link has been sent to the user's email.\n\n### Raises:\n- `404 Not Found`: If the user is not found.\n- `400 Bad Request`: If an OTP was requested too recently.",
        "operationId": "forgot_password_users_forgot_password_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_forgot_password_users_forgot_password_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        }
      }
    },
    "/users/request-password-reset": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Request Password Reset",
        "description": "Allows a logged-in user to request a password reset by generating and sending a password reset link.\n\n- **Stores OTP in an HTTP-only cookie** to prevent abuse.\n- **Prevents multiple resets by setting a cooldown period**.\n- **Sends an email with the reset link**.\n\n### Response:\n- A message confirming that a password reset link has been sent to the user's email.",
        "operationId": "request_password_reset_users_request_password_reset_post",
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/confirm-password-reset": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Confirm Password Reset with OTP",
        "description": "Allows users to reset their password using an OTP, without being signed in.\n\n### Request Body (JSON):\n- `email` (str): The user's email address.\n- `otp` (str): The OTP sent to the user's email.\n- `new_password` (str): The new password for the user.\n- `confirm_new_password` (str): Confirmation of the new password.\n\n### Response:\n- A message confirming the successful password reset.\n\n### Raises:\n- `400 Bad Request`: If the OTP is invalid, the passwords do not match, or the email is not provided.",
        "operationId": "confirm_password_reset_users_confirm_password_reset_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetConfirmation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        }
      }
    },
    "/users/reset-password-link": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Redirect Reset Link to Frontend",
        "description": "Redirects the user to the frontend reset password page.\n\n- **Requires email and OTP in query parameters.**\n- **Stores OTP in an HTTP-only cookie to prevent abuse.**\n- **Frontend should extract these values and call `/submit-reset-password`.**",
        "operationId": "redirect_reset_link_users_reset_password_link_get",
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        }
      }
    },
    "/users/submit-reset-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Submit New Password",
        "description": "Submits a new password after the user is redirected to the frontend.\n\n- **Ensures OTP cookie is present and matches stored OTP.**\n- **Updates password only if OTP is valid and unexpired.**",
        "operationId": "submit_reset_password_users_submit_reset_password_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordUpdateSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        }
      }
    },
    "/users/profile": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get User Profile Information",
        "description": "Retrieve the profile information of the currently logged-in user.",
        "operationId": "get_user_profile_users_profile_get",
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/users/profile/update": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update User Profile Information",
        "description": "Allows the user to update their profile information in both `users` and `user_profiles` tables.\n\n### Parameters:\n- `user_data` (JSON Body): Contains fields like `email`, `first_name`, `last_name`, `linkedin`, `twitter`, and `profile_picture_url` (if changed).\n\n### Response:\n- The updated user profile data.",
        "operationId": "update_profile_users_profile_update_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success - Request was successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created - Resource was successfully created."
          },
          "400": {
            "description": "Bad Request - The request could not be understood or was missing required parameters."
          },
          "401": {
            "description": "Unauthorized - Authentication is required and has failed or not yet been provided."
          },
          "403": {
            "description": "Forbidden - The request was valid, but you do not have the necessary permissions."
          },
          "404": {
            "description": "Not Found - The requested resource could not be found."
          },
          "409": {
            "description": "Conflict - The request could not be completed due to a conflict with the current state of the resource."
          },
          "422": {
            "description": "Unprocessable Entity - The request was well-formed but could not be followed due to validation errors."
          },
          "500": {
            "description": "Internal Server Error - An unexpected server error occurred."
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AIMessageResponseModel": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "profile_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile Id"
          },
          "content": {
            "type": "string",
            "title": "Content"
          },
          "usage_metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Usage Metadata"
          },
          "response_metadata": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Response Metadata"
          },
          "additional_kwargs": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Additional Kwargs"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "user_id",
          "profile_id",
          "content",
          "created_at"
        ],
        "title": "AIMessageResponseModel"
      },
      "Body_forgot_password_users_forgot_password_post": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "Body_forgot_password_users_forgot_password_post"
      },
      "Body_login_for_access_token_auth_token_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^password$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_login_for_access_token_auth_token_post"
      },
      "Body_resend_verification_email_users_resend_verification_email_post": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "Body_resend_verification_email_users_resend_verification_email_post"
      },
      "Body_super_admin_login_super_admin_login_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^password$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_super_admin_login_super_admin_login_post"
      },
      "Body_user_login_users_login_post": {
        "properties": {
          "user_identifier": {
            "type": "string",
            "title": "User Identifier",
            "description": "Email or username"
          },
          "password": {
            "type": "string",
            "title": "Password",
            "description": "User password"
          }
        },
        "type": "object",
        "required": [
          "user_identifier",
          "password"
        ],
        "title": "Body_user_login_users_login_post"
      },
      "Chat_Message": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "roomId": {
            "type": "string",
            "title": "Roomid"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "roomId",
          "message"
        ],
        "title": "Chat_Message",
        "example": {
          "id": "18",
          "message": "Hello",
          "roomId": "abc123"
        }
      },
      "ConfirmAccountDeletion": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "otp": {
            "type": "string",
            "title": "Otp"
          }
        },
        "type": "object",
        "required": [
          "email",
          "otp"
        ],
        "title": "ConfirmAccountDeletion"
      },
      "Gender": {
        "type": "string",
        "enum": [
          "Male",
          "Female",
          "Other"
        ],
        "title": "Gender"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Login": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "title": "Login"
      },
      "PaginatedResponse_UserProfileResponse_": {
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/PaginationMetadata"
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/UserProfileResponse"
            },
            "type": "array",
            "title": "Results"
          }
        },
        "type": "object",
        "required": [
          "metadata",
          "results"
        ],
        "title": "PaginatedResponse[UserProfileResponse]"
      },
      "PaginationMetadata": {
        "properties": {
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "limit": {
            "type": "integer",
            "title": "Limit"
          },
          "offset": {
            "type": "integer",
            "title": "Offset"
          },
          "current_page": {
            "type": "integer",
            "title": "Current Page"
          },
          "total_pages": {
            "type": "integer",
            "title": "Total Pages"
          }
        },
        "type": "object",
        "required": [
          "total",
          "limit",
          "offset",
          "current_page",
          "total_pages"
        ],
        "title": "PaginationMetadata"
      },
      "PasswordResetConfirmation": {
        "properties": {
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "otp": {
            "type": "string",
            "title": "Otp"
          },
          "new_password": {
            "type": "string",
            "title": "New Password"
          },
          "confirm_new_password": {
            "type": "string",
            "title": "Confirm New Password"
          }
        },
        "type": "object",
        "required": [
          "otp",
          "new_password",
          "confirm_new_password"
        ],
        "title": "PasswordResetConfirmation"
      },
      "PasswordUpdateSchema": {
        "properties": {
          "new_password": {
            "type": "string",
            "minLength": 8,
            "title": "New Password",
            "description": "The new password for the user"
          },
          "confirm_new_password": {
            "type": "string",
            "title": "Confirm New Password",
            "description": "Confirmation of the new password"
          }
        },
        "type": "object",
        "required": [
          "new_password",
          "confirm_new_password"
        ],
        "title": "PasswordUpdateSchema"
      },
      "RecoverAccountRequest": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "otp": {
            "type": "string",
            "title": "Otp"
          }
        },
        "type": "object",
        "required": [
          "email",
          "otp"
        ],
        "title": "RecoverAccountRequest"
      },
      "TokenResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "default": "bearer"
          }
        },
        "type": "object",
        "required": [
          "access_token"
        ],
        "title": "TokenResponse"
      },
      "UpdateAdminCredentials": {
        "properties": {
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Password"
          }
        },
        "type": "object",
        "title": "UpdateAdminCredentials"
      },
      "UserCreate": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "first_name": {
            "type": "string",
            "title": "First Name"
          },
          "last_name": {
            "type": "string",
            "title": "Last Name"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "title": "Password",
            "description": "Password must be at least 8 characters long."
          },
          "profile_picture": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile Picture"
          },
          "bio": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bio"
          },
          "linkedin": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Linkedin"
          },
          "twitter": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Twitter"
          },
          "nationality": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Nationality"
          },
          "phone_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone Number"
          },
          "gender": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Gender"
              },
              {
                "type": "null"
              }
            ]
          },
          "confirm_password": {
            "type": "string",
            "title": "Confirm Password"
          },
          "profile_picture_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile Picture Url"
          }
        },
        "type": "object",
        "required": [
          "email",
          "first_name",
          "last_name",
          "username",
          "password",
          "confirm_password"
        ],
        "title": "UserCreate"
      },
      "UserProfileResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "first_name": {
            "type": "string",
            "title": "First Name"
          },
          "last_name": {
            "type": "string",
            "title": "Last Name"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "bio": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bio"
          },
          "profile_picture": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile Picture"
          },
          "nationality": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Nationality"
          },
          "linkedin": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Linkedin"
          },
          "twitter": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Twitter"
          },
          "phone_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone Number"
          },
          "gender": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Gender"
              },
              {
                "type": "null"
              }
            ]
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active"
          },
          "is_verified": {
            "type": "boolean",
            "title": "Is Verified"
          },
          "is_author": {
            "type": "boolean",
            "title": "Is Author"
          },
          "is_admin": {
            "type": "boolean",
            "title": "Is Admin"
          },
          "is_super_admin": {
            "type": "boolean",
            "title": "Is Super Admin"
          },
          "is_expert": {
            "type": "boolean",
            "title": "Is Expert",
            "default": false
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "first_name",
          "last_name",
          "username",
          "is_active",
          "is_verified",
          "is_author",
          "is_admin",
          "is_super_admin",
          "created_at",
          "updated_at"
        ],
        "title": "UserProfileResponse"
      },
      "UserUpdate": {
        "properties": {
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "first_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "First Name"
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Name"
          },
          "bio": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Bio"
          },
          "profile_picture": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Profile Picture"
          },
          "nationality": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "Afghanistan",
                  "Albania",
                  "Algeria",
                  "Andorra",
                  "Angola",
                  "Argentina",
                  "Armenia",
                  "Australia",
                  "Austria",
                  "Azerbaijan",
                  "Bahamas",
                  "Bahrain",
                  "Bangladesh",
                  "Barbados",
                  "Belarus",
                  "Belgium",
                  "Belize",
                  "Benin",
                  "Bhutan",
                  "Bolivia",
                  "Bosnia and Herzegovina",
                  "Botswana",
                  "Brazil",
                  "Brunei",
                  "Bulgaria",
                  "Burkina Faso",
                  "Burundi",
                  "Cambodia",
                  "Cameroon",
                  "Canada",
                  "Cape Verde",
                  "Central African Republic",
                  "Chad",
                  "Chile",
                  "China",
                  "Colombia",
                  "Comoros",
                  "Congo",
                  "Costa Rica",
                  "Croatia",
                  "Cuba",
                  "Cyprus",
                  "Czech Republic",
                  "Denmark",
                  "Djibouti",
                  "Dominica",
                  "Dominican Republic",
                  "Ecuador",
                  "Egypt",
                  "El Salvador",
                  "Equatorial Guinea",
                  "Eritrea",
                  "Estonia",
                  "Eswatini",
                  "Ethiopia",
                  "Fiji",
                  "Finland",
                  "France",
                  "Gabon",
                  "Gambia",
                  "Georgia",
                  "Germany",
                  "Ghana",
                  "Greece",
                  "Grenada",
                  "Guatemala",
                  "Guinea",
                  "Guyana",
                  "Haiti",
                  "Honduras",
                  "Hungary",
                  "Iceland",
                  "India",
                  "Indonesia",
                  "Iran",
                  "Iraq",
                  "Ireland",
                  "Israel",
                  "Italy",
                  "Jamaica",
                  "Japan",
                  "Jordan",
                  "Kazakhstan",
                  "Kenya",
                  "Kiribati",
                  "Kuwait",
                  "Kyrgyzstan",
                  "Laos",
                  "Latvia",
                  "Lebanon",
                  "Lesotho",
                  "Liberia",
                  "Libya",
                  "Liechtenstein",
                  "Lithuania",
                  "Luxembourg",
                  "Madagascar",
                  "Malawi",
                  "Malaysia",
                  "Maldives",
                  "Mali",
                  "Malta",
                  "Mauritania",
                  "Mauritius",
                  "Mexico",
                  "Moldova",
                  "Monaco",
                  "Mongolia",
                  "Montenegro",
                  "Morocco",
                  "Mozambique",
                  "Myanmar",
                  "Namibia",
                  "Nauru",
                  "Nepal",
                  "Netherlands",
                  "New Zealand",
                  "Nicaragua",
                  "Niger",
                  "Nigeria",
                  "Norway",
                  "Oman",
                  "Pakistan",
                  "Palau",
                  "Panama",
                  "Papua New Guinea",
                  "Paraguay",
                  "Peru",
                  "Philippines",
                  "Poland",
                  "Portugal",
                  "Qatar",
                  "Romania",
                  "Russia",
                  "Rwanda",
                  "Saint Kitts and Nevis",
                  "Saint Lucia",
                  "Saint Vincent and the Grenadines",
                  "Samoa",
                  "San Marino",
                  "Sao Tome and Principe",
                  "Saudi Arabia",
                  "Senegal",
                  "Serbia",
                  "Seychelles",
                  "Sierra Leone",
                  "Singapore",
                  "Slovakia",
                  "Slovenia",
                  "Solomon Islands",
                  "Somalia",
                  "South Africa",
                  "South Korea",
                  "Spain",
                  "Sri Lanka",
                  "Sudan",
                  "Suriname",
                  "Sweden",
                  "Switzerland",
                  "Syria",
                  "Taiwan",
                  "Tajikistan",
                  "Tanzania",
                  "Thailand",
                  "Togo",
                  "Tonga",
                  "Trinidad and Tobago",
                  "Tunisia",
                  "Turkey",
                  "Turkmenistan",
                  "Tuvalu",
                  "Uganda",
                  "Ukraine",
                  "United Arab Emirates",
                  "United Kingdom",
                  "United States",
                  "Uruguay",
                  "Uzbekistan",
                  "Vanuatu",
                  "Venezuela",
                  "Vietnam",
                  "Yemen",
                  "Zambia",
                  "Zimbabwe"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Nationality"
          },
          "linkedin": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Linkedin"
          },
          "twitter": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Twitter"
          },
          "phone_number": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone Number"
          },
          "gender": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Gender"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "title": "UserUpdate"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {

            },
            "tokenUrl": "/auth/token"
          }
        }
      }
    }
  }
}